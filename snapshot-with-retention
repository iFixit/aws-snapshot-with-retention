#!/bin/bash -e
set -o pipefail
#
# Take a snapshot of each volume attached to this machine, then delete any
# previous snapshots older than 2 weeks.  Does not delete snapshots for
# unattached volumes.
#
# Modified from http://pastebin.ca/2317467
# In turn modified from http://www.stardothosting.com/blog/2012/05/automated-amazon-ebs-snapshot-backup-script-with-7-day-retention/

if [ "$1" = --help ] || [ "$1" = -h ]; then
   program=`basename "$0"`
   echo "Usage: $program" >&2
   exit 1
fi

# This is a magical Amazon service:
# http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html
metadata_uri='http://169.254.169.254/latest/meta-data'

# Constants
instance_id=`curl -s $metadata_uri/instance-id`

# Dates
cutoff_date=`date +%Y-%m-%d --date '14 days ago'`
cutoff_date=`date --date="$cutoff_date" +%s`

# Get the region
EC2_AVAIL_ZONE=`curl -s $metadata_uri/placement/availability-zone`
EC2_REGION="`sed -e 's:\([0-9][0-9]*\)[a-z]*\$:\\1:' <<< \"$EC2_AVAIL_ZONE\"`"

# ec2 describe-volumes returns two results for an attached volume: the volume
# itself (which belongs to a region) and the instance of the volume that's
# attached to the machine (which belongs to a pseudo device driver).  We don't
# want duplicates, because that's silly.
# Also, the text view of the command attempts to turn their nice structured
# json/table views into single-line output, which means we get some headers
# that don't really make sense.  Grepping for 'vol-' filters those out.
volumes=`aws ec2 describe-volumes \
            --output text \
            --region "$EC2_REGION" \
            --filters '{
               "name": "attachment.instance-id",
               "values":["'$instance_id'"]}' |
         grep 'vol-' |
         awk '{print $3}' |
         sort -u`

for volume in $volumes; do
   description="$(hostname)_backup-$(date +%Y-%m-%d)_[$instance_id]"
   cat <<EOT
Creating Snapshot for the volume: $volume \
with description: $description
EOT
   aws ec2 create-snapshot \
      --output text \
      --region "$EC2_REGION" \
      --description "$description" \
      --volume-id "$volume"

   # Get all snapshot info
   snap_info=`aws ec2 describe-snapshots \
                 --output text \
                 --region "$EC2_REGION" \
                 --filters '{
                    "name": "volume-id",
                    "values":["'$volume'"]}' |
               grep 'vol-'`

   # Since we're iterating over lines and each line has whitespace-separated
   # fields, we need to change bash's field separator.
   IFS=$'\n'
   for snap in $snap_info; do
      snapshot_name=$(awk '{print $6}' <<<"$snap")
      snapshot_date=$(awk '{print $5}' <<<"$snap" | awk -F T '{print $1}')
      snapshot_date=$(date --date="$snapshot_date" +%s)

      if (( "$snapshot_date" <= "$cutoff_date" )); then
         echo "deleting snapshot $snapshot_name ..."
         aws ec2 delete-snapshot \
            --output text \
            --region "$EC2_REGION" \
            --snapshot-id "$snapshot_name"
      else
         echo "not deleting snapshot $snapshot_name..."
      fi
   done
   # Reset it to be nice to the environment.
   unset IFS
done

